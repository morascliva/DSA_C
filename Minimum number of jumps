Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. 
This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.
Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.


#include <stdio.h>
#include <limits.h>

int minJumps(int arr[], int n) {
    if (n <= 1) {
        return 0; // No jumps needed for an empty array or a single element array
    }

    if (arr[0] == 0) {
        return -1; // Can't reach the end if the first element is 0
    }

    int jumps = 1; // Initial jump from the first element
    int maxReach = arr[0]; // Maximum index reachable from the current position
    int steps = arr[0]; // Number of steps possible from the current position

    for (int i = 1; i < n; i++) {
        if (i == n - 1) {
            return jumps; // Reached the end
        }
         
        if (maxReach < i + arr[i]) {
            maxReach = i + arr[i];
        }
else
        steps--;

        if (steps == 0) {
            jumps++;
            if (i >= maxReach) {
                return -1; // Can't progress further
            }
            else
            steps = maxReach - i;
        }
    }

    return -1; // Cannot reach the end
}

int main() {
    int arr[] = {1,2,3,4};
    int n = sizeof(arr) / sizeof(arr[0]);

   int result=minJumps(arr, n);

    if (result != -1) {
        printf("Minimum number of jumps to reach the end: %d\n", result);
    } else {
        printf("Cannot reach the end of the array.\n");
    }

    return 0;
}
